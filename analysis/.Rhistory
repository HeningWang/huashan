library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/huashan.csv")
subj_info <-read.csv(file = "../data/huashan_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","left.right")]
head(data, n=5)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)
xtabs(~conditions, data=data[data$item==1,]
xtabs(~conditions, data=data[data$item==1,])
xtabs(~conditions, data=data[data$item==1,])
View(data)
xtabs(~id, data=data[complete.cases(data),])
xtabs(~conditions, data=data[data$item==1,])
ï¼Ÿxtabs
?xtabs
data[data$item==1,]
xtabs(~conditions+id, data=data[data$item==1,])
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data$slider_value <- as.numeric(data$slider_value)
data <- merge(data,subj_exp_condition)
data$prefer_subj_1st <- ifelse(data$left.right=="S", 100-data$slider_value,data$slider_value)
data <- read.csv(file = "../data/huashan.csv")
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data$slider_value <- as.numeric(data$slider_value)
data <- merge(data,subj_exp_condition)
data$prefer_subj_1st <- ifelse(data$left.right=="S", 100-data$slider_value,data$slider_value)
# #TODO: adjust later
data_filler <- subset(data, conditions %in% c("fbrcf", "fbrdc", "fbrdf", "fercf", "ferdc", "ferdf","fzrcf", "fzrdc", "fzrdf",))
# #TODO: adjust later
data_filler <- subset(data, conditions %in% c("fbrcf", "fbrdc", "fbrdf", "fercf", "ferdc", "ferdf","fzrcf", "fzrdc", "fzrdf"))
#
data <- subset(data, conditions %in% c("brcf", "brdc", "brdf", "ercf", "erdc", "erdf","zrcf", "zrdc", "zrdf"))
xtabs(~id, data=data)
aggregate(data$prefer_subj_1st, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
#
#
ratings_aggregated<-aggregate(prefer_subj_1st~conditions, data=data, mean)
View(ratings_aggregated)
# #TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(prefer_subj_1st~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
#
names(ratings_aggregated)<-c("condition", "prefer_subj_1st", "se")
p <- ggplot(ratings_aggregated, aes(x=condition, y=prefer_subj_1st, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=prefer_subj_1st-se, ymax=prefer_subj_1st+se), width=.2,
position=position_dodge(.9))
View(p)
p
View(data)
View(subj_exp_condition)
xtabs(~id = 6238aff6c6587, data=data)
xtabs(~id, data=data[data$id == 6238aff6c6587,])
xtabs(~id, data=data)
View(data)
xtabs(~slider_value, data=data)
(~slider_value+id, data=data)
xtabs(~slider_value+id, data=data)
xtabs(~id+slider_value, data=data)
xtabs(~id+image_error, data=data)
xtabs(~id+conditions, data=data)#TODO: check
xtabs(~id, data=data)
xtabs(~conditions+id, data=data[data$item==1,])
xtabs(~conditions+id, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
xtabs(~conditions+id, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
xtabs(~prefer_subj_1st, ratings_aggregated)
xtabs(~cond+prefer_subj_1st, ratings_aggregated)
xtabs(~conditon+prefer_subj_1st, ratings_aggregated)
xtabs(~condition + prefer_subj_1st, ratings_aggregated)
View(data)
#TODO: adjust later
# some information about slider value: links = 0, rechts = 100. initialer Wert = mitte = 50
# if left.right in subj_info is left: 0 = preference for the first adj, 100 = preference for the second adj
# if left.right in subj_info is right: 0 = preference for the second adj, 100 = preference for the first adj
data$prefer_subj_1st <- ifelse(data$left.right=="L", 100-data$slider_value,data$slider_value)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/huashan.csv")
subj_info <-read.csv(file = "../data/huashan_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","left.right")]
#head(data, n=5)
xtabs(~id+image_error, data=data)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)#TODO: check
xtabs(~conditions+id, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
#...
#data <- data[complete.cases(data),]
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data$slider_value <- as.numeric(data$slider_value)
data <- merge(data,subj_exp_condition)
#TODO: adjust later
# some information about slider value: links = 0, rechts = 100. initialer Wert = mitte = 50
# if left.right in subj_info is left: 0 = preference for the first adj, 100 = preference for the second adj
# if left.right in subj_info is right: 0 = preference for the second adj, 100 = preference for the first adj
data$prefer_subj_1st <- ifelse(data$left.right=="L", 100-data$slider_value,data$slider_value)
# #TODO: adjust later
data_filler <- subset(data, conditions %in% c("fbrcf", "fbrdc", "fbrdf", "fercf", "ferdc", "ferdf","fzrcf", "fzrdc", "fzrdf"))
#
data <- subset(data, conditions %in% c("brcf", "brdc", "brdf", "ercf", "erdc", "erdf","zrcf", "zrdc", "zrdf"))
#
#
#
# exclude<-NULL
# #TODO: adjust
# #exclude <- c()
#
# data <- subset(data, !(id %in% exclude))
aggregate(data$prefer_subj_1st, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
#
#
ratings_aggregated<-aggregate(prefer_subj_1st~conditions, data=data, mean)
# #TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(prefer_subj_1st~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
#
names(ratings_aggregated)<-c("condition", "prefer_subj_1st", "se")
#
#
p <- ggplot(ratings_aggregated, aes(x=condition, y=prefer_subj_1st, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=prefer_subj_1st-se, ymax=prefer_subj_1st+se), width=.2,
position=position_dodge(.9))
#
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
pdf(file = file.path(plots_dir,"mean_preference.pdf"))
p
dev.off()
#
#
# data$relevant_prop <- ifelse(str_detect(data$conditions,"farbe"), "color", "size")
#
# data$sharpness <- ifelse(str_detect(data$conditions,"un"), "low", "high")
#
# m0 <- lmer(prefer_subj_1st~relevant_prop*sharpness+(1|id), data=data)
# summary(m0)
#
# m1 <- update(m0, .~.-relevant_prop:sharpness)
#
# anova(m0,m1)
# summary(m1)
#
# #
# # m2 <- update(m1, .~.-sharpness)
# #
# # anova(m2,m1)
# #
# # m3 <- update(m2, .~.-relevant_prop)
# #
# # anova(m2,m3)
# #
# #
# # summary()
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/huashan.csv")
subj_info <-read.csv(file = "../data/huashan_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","left.right")]
#head(data, n=5)
xtabs(~id+image_error, data=data)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)#TODO: check
xtabs(~conditions+id, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
#...
#data <- data[complete.cases(data),]
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data$slider_value <- as.numeric(data$slider_value)
data <- merge(data,subj_exp_condition)
#TODO: adjust later
# some information about slider value: links = 0, rechts = 100. initialer Wert = mitte = 50
# if left.right in subj_info is left: 0 = preference for the first adj, 100 = preference for the second adj
# if left.right in subj_info is right: 0 = preference for the second adj, 100 = preference for the first adj
data$prefer_subj_1st <- ifelse(data$left.right=="S", 100-data$slider_value,data$slider_value)
# #TODO: adjust later
data_filler <- subset(data, conditions %in% c("fbrcf", "fbrdc", "fbrdf", "fercf", "ferdc", "ferdf","fzrcf", "fzrdc", "fzrdf"))
#
data <- subset(data, conditions %in% c("brcf", "brdc", "brdf", "ercf", "erdc", "erdf","zrcf", "zrdc", "zrdf"))
#
#
#
# exclude<-NULL
# #TODO: adjust
# #exclude <- c()
#
# data <- subset(data, !(id %in% exclude))
aggregate(data$prefer_subj_1st, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
#
#
ratings_aggregated<-aggregate(prefer_subj_1st~conditions, data=data, mean)
# #TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(prefer_subj_1st~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
#
names(ratings_aggregated)<-c("condition", "prefer_subj_1st", "se")
#
#
p <- ggplot(ratings_aggregated, aes(x=condition, y=prefer_subj_1st, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=prefer_subj_1st-se, ymax=prefer_subj_1st+se), width=.2,
position=position_dodge(.9))
#
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
pdf(file = file.path(plots_dir,"mean_preference.pdf"))
p
dev.off()
#
#
# data$relevant_prop <- ifelse(str_detect(data$conditions,"farbe"), "color", "size")
#
# data$sharpness <- ifelse(str_detect(data$conditions,"un"), "low", "high")
#
# m0 <- lmer(prefer_subj_1st~relevant_prop*sharpness+(1|id), data=data)
# summary(m0)
#
# m1 <- update(m0, .~.-relevant_prop:sharpness)
#
# anova(m0,m1)
# summary(m1)
#
# #
# # m2 <- update(m1, .~.-sharpness)
# #
# # anova(m2,m1)
# #
# # m3 <- update(m2, .~.-relevant_prop)
# #
# # anova(m2,m3)
# #
# #
# # summary()
View(data)
View(data_filler)
View(subj_info)
data_raw <- read.csv(file = "../data/huashan.csv")
library(tidyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data_raw <- read.csv(file = "../data/huashan.csv")
subj_info <-read.csv(file = "../data/huashan_subj_info.csv")
subj_exp_condition<-subj_info[c("id","left.right")]
View(subj_info)
View(subj_info)
View(subj_exp_condition)
xtabs(~id, data=data)
# get some general view of raw data
head(data_raw, n=5)
xtabs(~id, data=data_raw)
xtabs(~id, data=data[complete.cases(data),])
xtabs(~id, data=data[complete.cases(data_raw),])
xtabs(~id, data=data[complete.cases(data_raw),])
xtabs(~id+conditions, data=data_raw)#TODO: check
# show every
xtabs(~image_error, data=data_raw)
#
xtabs(~conditions, data=data[data$item==1,])
#
xtabs(~conditions, data=data[data$item==1,])
#
xtabs(~conditions, data=data_raw[data_raw$item==1,])
xtabs(~id, data=data_raw[complete.cases(data_raw),])
# show which pp has done which list
xtabs(~conditions, data=data_raw[data_raw$item==1,])
# show which pp has done which list
xtabs(~conditions+item, data=data_raw[data_raw$item==1,])
xtabs(~id+item, data=data_raw)
data$conditions <- droplevels(as.factor(data_raw$conditions))
data$id <- droplevels(as.factor(data_raw$id))
data$slider_value <- as.numeric(data_raw$slider_value)
View(data)
# set up factors and normalize numuerical values
data$conditions <- droplevels(as.factor(data_raw$conditions))
library(data.table)
install.packages("data.table")
library(data.table)
# set up factors and normalize numuerical values
data_exp <- copy(data_raw)
data_exp <- copy(data_raw)
data_exp$conditions <- droplevels(as.factor(data_exp$conditions))
data_exp$id <- droplevels(as.factor(data_exp_raw$id))
data_exp$slider_value <- as.numeric(data_exp$slider_value)
data_exp <- merge(data_exp,subj_exp_condition)
data_exp$id <- droplevels(as.factor(data_exp$id))
data_exp <- copy(data_raw)
data_exp$conditions <- droplevels(as.factor(data_exp$conditions))
data_exp$id <- droplevels(as.factor(data_exp$id))
data_exp$slider_value <- as.numeric(data_exp$slider_value)
data_exp <- merge(data_exp,subj_exp_condition)
View(data_exp)
#TODO: adjust later
data_exp$prefer_adj_1st <- ifelse(data_exp$left.right=="S", 100-data$slider_value,data$slider_value)
# show which pp has done which list
xtabs(~conditions+item, data=data_raw[data_raw$item==1,])
#TODO: adjust later
data_exp$prefer_adj_1st <- ifelse(data_exp$left.right=="S", 100-data_exp$slider_value,data_exp$slider_value)
# show which pp has done which list
xtabs(~conditions+item, data=data_raw[data_raw$item==1,])
if (data_raw$item == 1 & data_raw$conditions == "brdc"){
data_raw$list = 1
}
if (data_raw$item == 1 && data_raw$conditions == "brdc"){
data_raw$list = 1
}
View(data_raw)
View(data)
if (data_raw$item == 1 && data_raw$conditions == "brdc"){
data_raw$list = 1
}
if (data_raw$item == 1 && data_raw$conditions == "brdc"){
data_raw$list = c(1)
}
View(data_raw)
if (data_raw$item == 1 && data_raw$conditions == "erdc"){
data_raw$list = c(1)
}
if (data_raw$item == 1 && data_raw$conditions == "erdc"){
data_raw$list = rep(1, 1260)
}
View(data_raw)
# show which pp has done which list
xtabs(~conditions+item, data=data_raw[data_raw$item==1,])
data_raw$list = rep(1, 1260)
View(data_raw)
data_raw$list = rep(1, 1250)
if (data_raw$item == 1 & data_raw$conditions == "erdc"){
data_raw$list = rep(1, 1250)
}
data_exp$id <- droplevels(as.factor(data_exp$id))
# TODO: show how many experiment items are responsed with -1
xtabs(~prefer_adj_1st == -1, data = data_exp)
data_filler <- subset(data_exp, conditions %in% c("ferdc", "ferdf", "fercf","fzrdc", "fzrdf", "fzrcf", "fbrdc", "fbrdf", "fbrcf"))
data_exp <- subset(data_exp, conditions %in% c("erdc", "erdf", "ercf","zrdc", "zrdf", "zrcf", "brdc", "brdf", "brcf"))
# TODO: show how many experiment items are responsed with -1
xtabs(~prefer_adj_1st == -1, data = data_exp)
# show how many trials one pp has done (exp. 180)
xtabs(~id, data=data_raw)
# import raw data from .csv
data_raw <- read.csv(file = "../data/huashan.csv")
# show how many trials one pp has done (exp. 180)
xtabs(~id, data=data_raw)
# import raw data from .csv
data_raw <- read.csv(file = "../data/huashan.csv")
subj_info <-read.csv(file = "../data/huashan_subj_info.csv")
# show how many trials one pp has done (exp. 180)
xtabs(~id, data=data_raw)
# import raw data from .csv
data_raw <- read.csv(file = "../data/huashan.csv")
# show how many trials one pp has done (exp. 180)
xtabs(~id, data=data_raw)
# show if every images are properly displayed
xtabs(~image_error, data=data_raw)
#show how many pps
xtabs(~item, data = data_raw)
View(subj_exp_condition)
#show how many pps
xtabs(~id, data = subj_info)
#show how many pps
sum(xtabs(~id, data = subj_info))
# TODO: show how many experiment items are responsed with -1
show(~prefer_adj_1st == -1, data = data_exp)
?which
# TODO: show how many experiment items are responsed with -1
which(prefer_adj_1st == -1, data = data_exp)
# TODO: show how many experiment items are responsed with -1
which(prefer_adj_1st == -1)
# TODO: show how many experiment items are responsed with -1
which(data_exp$prefer_adj_1st == -1)
<<<<<<< Updated upstream
# TODO: show how many experiment items are responsed with -1
which(data_exp$prefer_adj_1st == -1)
View(data_exp)
sum(xtabs(~prefer_adj_1st == -1, data = data_exp))
xtabs(~prefer_adj_1st == -1, data = data_exp)
xtabs(~prefer_adj_1st = -1, data = data_exp)
=======
>>>>>>> Stashed changes
