data$context <- ifelse(data$conditions %in% c("so1", "co1", "cs1"), "first", "second")
data$subjective <- ifelse(data$conditions %in% c("so1", "so2"), "size_only",
ifelse(data$conditions %in% c("co1", "co2"), "color_only", "both"))
#for trimr
data$participant <- data$id
data$condition <- data$conditions
data$accuracy <- 1
trimmed_data <- sdTrim(data = data, minRT = 200, sd = 3,
perCondition = FALSE, perParticipant = TRUE, omitErrors = FALSE,
returnType = "raw", digits = 0)
rt_aggregated<-aggregate(rt~subjective+context, data=trimmed_data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_rt<-aggregate(rt~subjective+context, data=trimmed_data, function(x) {sd(x)/sqrt(length(x))})
rt_aggregated<-cbind(rt_aggregated,ses_rt[,3])
names(rt_aggregated)<-c("context", "subjective", "mean_rt", "se")
p <- ggplot(rt_aggregated, aes(x=context, y=mean_rt, fill=subjective)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_rt-se, ymax=mean_rt+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
trimmed_data <- sdTrim(data = data, minRT = 200, sd = 3,
perCondition = TRUE, perParticipant = TRUE, omitErrors = FALSE,
returnType = "raw", digits = 0)
rt_aggregated<-aggregate(rt~subjective+context, data=trimmed_data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_rt<-aggregate(rt~subjective+context, data=trimmed_data, function(x) {sd(x)/sqrt(length(x))})
rt_aggregated<-cbind(rt_aggregated,ses_rt[,3])
names(rt_aggregated)<-c("context", "subjective", "mean_rt", "se")
p <- ggplot(rt_aggregated, aes(x=context, y=mean_rt, fill=subjective)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_rt-se, ymax=mean_rt+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/zijinshan.csv")
subj_info <-read.csv(file = "../data/zijinshan_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","acceptable")]
#head(data, n=5)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)
#correct type in filler label
data[data$conditions=="filer_false",]$conditions <- "filler_false"
xtabs(~conditions, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data <- merge(data,subj_exp_condition)
data$adj_slider_val <- ifelse(data$acceptable=="right", data$slider_value,100-data$slider_value)
data_filler <- subset(data, conditions %in% c("filler_false", "filler_true"))
#TODO: Why are there NAs
aggregate(data_filler$adj_slider_val, list(data_filler$conditions, data_filler$id), mean)
exclude <- c("60f190606ad98", "60f2df1b43113", "60f2e7b61e339",
"60f2f548c7955", "60f2fb8d79551", "60f2feab39904",
"60f310de89d9c")
data <- subset(data, !(id %in% exclude))
aggregate(data$adj_slider_val, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
data$rt<- as.numeric(gsub("\\[|\\]", "", data$read_time))
aggregate(data$rt, list(data$conditions),
FUN=function(x){c(mean(x, na.rm=TRUE),sd(x, na.rm=TRUE)/sqrt(length(x)))})
ratings_aggregated<-aggregate(adj_slider_val~conditions, data=data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(adj_slider_val~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
names(ratings_aggregated)<-c("condition", "mean_slider_value", "se")
p <- ggplot(ratings_aggregated, aes(x=condition, y=mean_slider_value, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_slider_value-se, ymax=mean_slider_value+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
summary(lmer(adj_slider_val~conditions+(1|id), data=data))
data <- subset(data, conditions %in% c("so1", "so2", "co1", "co2", "cs1", "cs2"))
data$context <- ifelse(data$conditions %in% c("so1", "co1", "cs1"), "first", "second")
data$subjective <- ifelse(data$conditions %in% c("so1", "so2"), "size_only",
ifelse(data$conditions %in% c("co1", "co2"), "color_only", "both"))
#for trimr
data$participant <- data$id
data$condition <- data$conditions
data$accuracy <- 1
trimmed_data <- sdTrim(data = data, minRT = 200, sd = 3,
perCondition = TRUE, perParticipant = TRUE, omitErrors = FALSE,
returnType = "raw", digits = 0)
rt_aggregated<-aggregate(rt~subjective+context, data=trimmed_data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_rt<-aggregate(rt~subjective+context, data=trimmed_data, function(x) {sd(x)/sqrt(length(x))})
rt_aggregated<-cbind(rt_aggregated,ses_rt[,3])
names(rt_aggregated)<-c("context", "subjective", "mean_rt", "se")
p <- ggplot(rt_aggregated, aes(x=context, y=mean_rt, fill=subjective)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_rt-se, ymax=mean_rt+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
trimmed_data <- sdTrim(data = data, minRT = 200, sd = 3,
perCondition = FALSE, perParticipant = TRUE, omitErrors = FALSE,
returnType = "raw", digits = 0)
rt_aggregated<-aggregate(rt~subjective+context, data=trimmed_data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_rt<-aggregate(rt~subjective+context, data=trimmed_data, function(x) {sd(x)/sqrt(length(x))})
rt_aggregated<-cbind(rt_aggregated,ses_rt[,3])
names(rt_aggregated)<-c("context", "subjective", "mean_rt", "se")
p <- ggplot(rt_aggregated, aes(x=context, y=mean_rt, fill=subjective)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_rt-se, ymax=mean_rt+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
m0 <- lmer(rt~subjective+context+(1|id), data=trimmed_data))
m0 <- lmer(rt~subjective+context+(1|id), data=trimmed_data)
summary(m0)
library(lmerTest)
m0 <- lmer(rt~subjective+context+(1|id), data=trimmed_data)
library(lmerTest)
summary(m0)
View(trimmed_data)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/zijinshan.csv")
subj_info <-read.csv(file = "../data/zijinshan_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","acceptable")]
#head(data, n=5)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)
#correct type in filler label
data[data$conditions=="filer_false",]$conditions <- "filler_false"
xtabs(~conditions, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data <- merge(data,subj_exp_condition)
data$adj_slider_val <- ifelse(data$acceptable=="right", data$slider_value,100-data$slider_value)
data_filler <- subset(data, conditions %in% c("filler_false", "filler_true"))
#TODO: Why are there NAs
aggregate(data_filler$adj_slider_val, list(data_filler$conditions, data_filler$id), mean)
exclude <- c("60f190606ad98", "60f2df1b43113", "60f2e7b61e339",
"60f2f548c7955", "60f2fb8d79551", "60f2feab39904",
"60f310de89d9c")
data <- subset(data, !(id %in% exclude))
aggregate(data$adj_slider_val, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
data$rt<- as.numeric(gsub("\\[|\\]", "", data$read_time))
aggregate(data$rt, list(data$conditions),
FUN=function(x){c(mean(x, na.rm=TRUE),sd(x, na.rm=TRUE)/sqrt(length(x)))})
ratings_aggregated<-aggregate(adj_slider_val~conditions, data=data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(adj_slider_val~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
names(ratings_aggregated)<-c("condition", "mean_slider_value", "se")
p <- ggplot(ratings_aggregated, aes(x=condition, y=mean_slider_value, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_slider_value-se, ymax=mean_slider_value+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
summary(lmer(adj_slider_val~conditions+(1|id), data=data))
data <- subset(data, conditions %in% c("so1", "so2", "co1", "co2", "cs1", "cs2"))
data$subjective <- ifelse(data$conditions %in% c("so1", "co1", "cs1"), "first", "second")
data$context <- ifelse(data$conditions %in% c("so1", "so2"), "size_only",
ifelse(data$conditions %in% c("co1", "co2"), "color_only", "both"))
#for trimr
data$participant <- data$id
data$condition <- data$conditions
data$accuracy <- 1
trimmed_data <- sdTrim(data = data, minRT = 200, sd = 3,
perCondition = FALSE, perParticipant = TRUE, omitErrors = FALSE,
returnType = "raw", digits = 0)
rt_aggregated<-aggregate(rt~subjective+context, data=trimmed_data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_rt<-aggregate(rt~subjective+context, data=trimmed_data, function(x) {sd(x)/sqrt(length(x))})
rt_aggregated<-cbind(rt_aggregated,ses_rt[,3])
names(rt_aggregated)<-c("context", "subjective", "mean_rt", "se")
rt_aggregated
names(rt_aggregated)<-c("subjective", "context", "mean_rt", "se")
p <- ggplot(rt_aggregated, aes(x=context, y=mean_rt, fill=subjective)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_rt-se, ymax=mean_rt+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
m0 <- lmer(rt~subjective+context+(1|id), data=trimmed_data)
summary(m0)
pdf(file = file.path(plots, "rt_plot.pdf"))
p
dev.off()
pdf(file = file.path(plots, "rt_plot.pdf"))
p
dev.off()
pdf(file = file.path(plots_dir, "rt_plot.pdf"))
p
dev.off()
pdf(file = file.path(plots_dir, "rt_plot.pdf"))
p
dev.off()
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/zijinshan.csv")
subj_info <-read.csv(file = "../data/zijinshan_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","acceptable")]
#head(data, n=5)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)
#correct type in filler label
data[data$conditions=="filer_false",]$conditions <- "filler_false"
xtabs(~conditions, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data <- merge(data,subj_exp_condition)
data$adj_slider_val <- ifelse(data$acceptable=="right", data$slider_value,100-data$slider_value)
data_filler <- subset(data, conditions %in% c("filler_false", "filler_true"))
#TODO: Why are there NAs
aggregate(data_filler$adj_slider_val, list(data_filler$conditions, data_filler$id), mean)
exclude <- c("60f190606ad98", "60f2df1b43113", "60f2e7b61e339",
"60f2f548c7955", "60f2fb8d79551", "60f2feab39904",
"60f310de89d9c")
data <- subset(data, !(id %in% exclude))
aggregate(data$adj_slider_val, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
data$rt<- as.numeric(gsub("\\[|\\]", "", data$read_time))
aggregate(data$rt, list(data$conditions),
FUN=function(x){c(mean(x, na.rm=TRUE),sd(x, na.rm=TRUE)/sqrt(length(x)))})
ratings_aggregated<-aggregate(adj_slider_val~conditions, data=data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(adj_slider_val~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
names(ratings_aggregated)<-c("condition", "mean_slider_value", "se")
p <- ggplot(ratings_aggregated, aes(x=condition, y=mean_slider_value, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_slider_value-se, ymax=mean_slider_value+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
#save to pdf
pdf(file = file.path(plots_dir, "ratings_plot.pdf"))
p
dev.off()
summary(lmer(adj_slider_val~conditions+(1|id), data=data))
data <- subset(data, conditions %in% c("so1", "so2", "co1", "co2", "cs1", "cs2"))
data$subjective <- ifelse(data$conditions %in% c("so1", "co1", "cs1"), "first", "second")
data$context <- ifelse(data$conditions %in% c("so1", "so2"), "size_only",
ifelse(data$conditions %in% c("co1", "co2"), "color_only", "both"))
#for trimr
data$participant <- data$id
data$condition <- data$conditions
data$accuracy <- 1
trimmed_data <- sdTrim(data = data, minRT = 200, sd = 3,
perCondition = FALSE, perParticipant = TRUE, omitErrors = FALSE,
returnType = "raw", digits = 0)
rt_aggregated<-aggregate(rt~subjective+context, data=trimmed_data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_rt<-aggregate(rt~subjective+context, data=trimmed_data, function(x) {sd(x)/sqrt(length(x))})
rt_aggregated<-cbind(rt_aggregated,ses_rt[,3])
names(rt_aggregated)<-c("subjective", "context", "mean_rt", "se")
p <- ggplot(rt_aggregated, aes(x=context, y=mean_rt, fill=subjective)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_rt-se, ymax=mean_rt+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
#save to pdf
pdf(file = file.path(plots_dir, "rt_plot.pdf"))
p
dev.off()
m0 <- lmer(rt~subjective+context+(1|id), data=trimmed_data)
summary(m0)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/zijinshan.csv")
subj_info <-read.csv(file = "../data/zijinshan_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","acceptable")]
#head(data, n=5)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)
#correct type in filler label
data[data$conditions=="filer_false",]$conditions <- "filler_false"
xtabs(~conditions, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data <- merge(data,subj_exp_condition)
data$adj_slider_val <- ifelse(data$acceptable=="right", data$slider_value,100-data$slider_value)
data_filler <- subset(data, conditions %in% c("filler_false", "filler_true"))
#TODO: Why are there NAs
aggregate(data_filler$adj_slider_val, list(data_filler$conditions, data_filler$id), mean)
exclude <- c("60f190606ad98", "60f2df1b43113", "60f2e7b61e339",
"60f2f548c7955", "60f2fb8d79551", "60f2feab39904",
"60f310de89d9c")
data <- subset(data, !(id %in% exclude))
aggregate(data$adj_slider_val, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
data$rt<- as.numeric(gsub("\\[|\\]", "", data$read_time))
aggregate(data$rt, list(data$conditions),
FUN=function(x){c(mean(x, na.rm=TRUE),sd(x, na.rm=TRUE)/sqrt(length(x)))})
ratings_aggregated<-aggregate(adj_slider_val~conditions, data=data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(adj_slider_val~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
names(ratings_aggregated)<-c("condition", "mean_slider_value", "se")
p <- ggplot(ratings_aggregated, aes(x=condition, y=mean_slider_value, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_slider_value-se, ymax=mean_slider_value+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
#save to pdf
pdf(file = file.path(plots_dir, "ratings_plot.pdf"))
p
dev.off()
summary(lmer(adj_slider_val~conditions+(1|id), data=data))
data <- subset(data, conditions %in% c("so1", "so2", "co1", "co2", "cs1", "cs2"))
data$subjective <- ifelse(data$conditions %in% c("so1", "co1", "cs1"), "first", "second")
data$context <- ifelse(data$conditions %in% c("so1", "so2"), "size_only",
ifelse(data$conditions %in% c("co1", "co2"), "color_only", "both"))
#for trimr
data$participant <- data$id
data$condition <- data$conditions
data$accuracy <- 1
trimmed_data <- sdTrim(data = data, minRT = 200, sd = 3,
perCondition = FALSE, perParticipant = TRUE, omitErrors = FALSE,
returnType = "raw", digits = 0)
rt_aggregated<-aggregate(rt~subjective+context, data=trimmed_data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_rt<-aggregate(rt~subjective+context, data=trimmed_data, function(x) {sd(x)/sqrt(length(x))})
rt_aggregated<-cbind(rt_aggregated,ses_rt[,3])
names(rt_aggregated)<-c("subjective", "context", "mean_rt", "se")
p <- ggplot(rt_aggregated, aes(x=context, y=mean_rt, fill=subjective)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_rt-se, ymax=mean_rt+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
#save to pdf
pdf(file = file.path(plots_dir, "rt_plot.pdf"))
p
dev.off()
m0 <- lmer(rt~subjective+context+(1|id), data=trimmed_data)
summary(m0)
setwd("~/GitHub/pfaender/analysis")
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/pfaender.csv")
subj_info <-read.csv(file = "../data/pfaender_subj_info.csv")
#do stuff with subj_info here:
#...
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/pfaender.csv")
subj_info <-read.csv(file = "../data/pfaender_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","left.right")]
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)#TODO: check
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/pfaender.csv")
subj_info <-read.csv(file = "../data/pfaender_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","left.right")]
#head(data, n=5)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)#TODO: check
xtabs(~conditions, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data <- merge(data,subj_exp_condition)
#TODO: adjust later
data$prefer_subj_1st <- ifelse(data$left.right=="L", 100-data$slider_value,data$slider_value)
data$slider_value
data$slider_value <- as.numeric(data$slider_value)
data <- merge(data,subj_exp_condition)
#TODO: adjust later
data$prefer_subj_1st <- ifelse(data$left.right=="L", 100-data$slider_value,data$slider_value)
xtabs(~id+conditions, data=data)#TODO: check
data <- subset(data, conditions %in% c("farbe_scharf", "farbe_unscharf", "grosse_scharf", "grosse_unscharf"))
#TODO: Why are there NAs
aggregate(data_filler$adj_slider_val, list(data_filler$conditions, data_filler$id), mean)
exclude<-[]
data <- subset(data, !(id %in% exclude))
aggregate(data$adj_slider_val, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
exclude<-NULL
data <- subset(data, !(id %in% exclude))
aggregate(data$adj_slider_val, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
aggregate(data$prefer_subj_1st, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
rm(list=ls())
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/pfaender.csv")
subj_info <-read.csv(file = "../data/pfaender_subj_info.csv")
#do stuff with subj_info here:
#...
subj_exp_condition<-subj_info[c("id","left.right")]
#head(data, n=5)
xtabs(~id, data=data)
xtabs(~id+conditions, data=data)#TODO: check
xtabs(~conditions, data=data[data$item==1,])
xtabs(~id, data=data[complete.cases(data),])
data$conditions <- droplevels(as.factor(data$conditions))
data$id <- droplevels(as.factor(data$id))
data$slider_value <- as.numeric(data$slider_value)
data <- merge(data,subj_exp_condition)
#TODO: adjust later
data$prefer_subj_1st <- ifelse(data$left.right=="S", 100-data$slider_value,data$slider_value)
#TODO: adjust later
#data_filler <- subset(data, conditions %in% c("filler_false", "filler_true"))
data <- subset(data, conditions %in% c("farbe_scharf", "farbe_unscharf", "grosse_scharf", "grosse_unscharf"))
exclude<-NULL
#TODO: adjust
#exclude <- c("60f190606ad98", "60f2df1b43113", "60f2e7b61e339",
"60f2f548c7955", "60f2fb8d79551", "60f2feab39904",
"60f310de89d9c")
data <- subset(data, !(id %in% exclude))
aggregate(data$prefer_subj_1st, list(data$conditions),
FUN=function(x){c(mean(x, na.rm = TRUE),sd(x, na.rm = TRUE)/sqrt(length(x)))})
ratings_aggregated<-aggregate(adj_slider_val~conditions, data=data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(adj_slider_val~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
names(ratings_aggregated)<-c("condition", "mean_slider_value", "se")
p <- ggplot(ratings_aggregated, aes(x=condition, y=mean_slider_value, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_slider_value-se, ymax=mean_slider_value+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
ratings_aggregated<-aggregate(prefer_subj_1st~conditions, data=data, mean)
#TODO: find another way to compute ses (SEwithin?)
ses_ratings<-aggregate(prefer_subj_1st~conditions, data=data, function(x) {sd(x)/sqrt(length(x))})
ratings_aggregated<-cbind(ratings_aggregated,ses_ratings[,2])
names(ratings_aggregated)<-c("condition", "mean_slider_value", "se")
p <- ggplot(ratings_aggregated, aes(x=condition, y=mean_slider_value, fill=condition)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=mean_slider_value-se, ymax=mean_slider_value+se), width=.2,
position=position_dodge(.9))
#p + scale_fill_brewer(palette="Paired") + theme_minimal()
p
summary(lmer(adj_slider_val~conditions+(1|id), data=data))
summary(lmer(prefer_subj_first~conditions+(1|id), data=data))
summary(lmer(prefer_subj_1st~conditions+(1|id), data=data))
